### Typical Presenter Setup:
* extend <i><b>BasePresenter.java</b></i>
* prerequisite: must be setup and Injected to corresponding fragments by injection framework. (see the sample app)
* implements <i><b>BasePresenterInterface</b></i>

```java
public class PlaceListPresenter extends BasePresenter implements BasePresenterInterface{
    public static final String TAG = "PlaceListPresenter";

    Subscription placeListSubscription;
    PlaceListViewInterface view;
    Context context;
    PlaceListActivity activity;

    @Inject
    RestApiManager apiManager;
    private ArrayList<Place> placeList = new ArrayList<Place>();

    public PlaceListPresenter(MyApplication myApplication){
        //INITIALIZE INJECTION
        myApplication.getAppComponent().inject(this);
    }

    @Override
    public void __fmwk_bpi_init(BaseActivity activity, BaseFragment fragment) {
        this.context = fragment.getContext();
        this.activity = (PlaceListActivity) activity;
        Timber.tag(TAG);
        this.view = (PlaceListFragment)fragment;
        if (__fmwk_bp_isInitialLoad()){

            Timber.d("__fmwk_bpi_init:  new activity");
            __fmwk_bpi_init_new();
        }else{
            Timber.d("__fmwk_bpi_init: configuration/orientation change");
            __fmwk_bpi_init_change();
        }
    }

    @Override
    public void __fmwk_bpi_init_new() {
        Timber.d("__fmwk_bpi_init_new: for new activity");
        placeList.clear();
        view.getAdapter().notifyDataSetChanged();
    }

    @Override
    public void __fmwk_bpi_init_change() {
        Timber.d("__fmwk_bpi_init_change: configuration change");

    }

    @Override
    public void __fmwk_bpi_populate() {
        Timber.d("__fmwk_bpi_populate: ");
        if (__fmwk_bp_isFromRotation()){
            //IMPORTANT: CHECK
            Timber.d("__fmwk_bpi_populate: rotation detected.");
            if (RxUtil.isSubscribed(placeListSubscription)){
                view.showLoading(android.R.drawable.progress_horizontal, "Loading");
            }
            return;
        }
        callPlaceListApi();
    }

    @Override
    public void __fmwk_bpi_resume() {
        Timber.d("__fmwk_bpi_resume: ");
    }

    @Override
    public void __fmwk_bpi_pause() {
        Timber.d("__fmwk_bpi_pause: ");
    }

    @Override
    public void __fmwk_bpi_destroy() {
        Timber.d("__fmwk_bpi_destroy: ");
        //...

    }

    public void callPlaceListApi(){
        Timber.d("callPlaceListApi: ");
        //... see the sample app
    }

    public ArrayList<Place> getPlaceList() {
        return placeList;
    }

    public void setPlaceList(ArrayList<Place> place) {
        this.placeList = place;
    }

    public void onListItemClick(Place place){
       //... see the sample app
    }

    public Context getContext() {
        return context;
    }
}
```

#### Typical Fragment Setup:
 * extend <i><b>BaseFragment.java</b></i>
 * implements <i><b>BaseFragmentInterface</b></i>
 * lifecycle methods to implement: <i><b>onCreate(), onCreateView(), onViewCreated(), onDestroy(), onResume(), onPause() </b></i>
 * implement own View Interface
 * <b>Important:</b> the method calls to these method name prefixed with <b>__</b> (e.g.<b>__methodName</b>) are very important. Always follow this structure with other fragments, this will help setup the framework.
```java
public class PlaceListFragment extends BaseFragment implements BaseFragmentInterface, PlaceListViewInterface{
    private static final String TAG = "PlaceListFragment";
    
    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ((MyApplication)getActivity().getApplication()).getAppComponent().inject(this);
        Timber.d("onCreate:");
        __fmwk_bf_checkIfNewActivity(savedInstanceState, presenter);
    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_place_list, container, false);
        Timber.d("onCreateView:");
        ButterKnife.bind(this, view);
        __fmwk_bfi_init_views();
        presenter.__fmwk_bpi_init((BaseActivity) getActivity(), this);
        return view;
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        Timber.d("onViewCreated: ");
        presenter.__fmwk_bpi_populate();
    }


    @Override
    public void __fmwk_bfi_init_views() {
        Timber.d("__fmwk_bfi_init_views:");
        //INITIALIZE VIEWS HERE

        //HANDLE ORIENTATION CHANGE OF RECYCLERVIEW,
        if(getActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT){
            LinearLayoutManager llm = new LinearLayoutManager(getActivity());
            llm.setOrientation(LinearLayoutManager.VERTICAL);
            listView.setLayoutManager(llm);
        } else{
            listView.setLayoutManager(new GridLayoutManager(getActivity(), 2));
        }

        //INITIALIZE THE ADAPTERS
        adapter = new PlaceListAdapter(presenter.getPlaceList(), presenter);
        listView.setAdapter(getAdapter());
        getAdapter().notifyDataSetChanged();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Timber.d("onDestroy: ");
        presenter.__fmwk_bpi_destroy();
    }

    @Override
    public void onResume() {
        super.onResume();
        Timber.d("onResume: ");
        presenter.__fmwk_bpi_resume();
    }


    @Override
    public void onPause() {
        super.onPause();
        Timber.d("onPause: ");
        presenter.__fmwk_bpi_pause();
    }
    
}
```

# (GitHub-Flavored) Markdown Editor

Basic useful feature list:

 * Ctrl+S / Cmd+S to save the file
 * Ctrl+Shift+S / Cmd+Shift+S to choose to save as Markdown or HTML
 * Drag and drop a file into here to load it
 * File contents are saved in the URL so you can share files


I'm no good at writing sample / filler text, so go write something yourself.

Look, a list!

 * foo
 * bar
 * baz

And here's some code! :+1:

```javascript
$(function(){
  $('div').html('I am a div.');
});
```

This is [on GitHub](https://github.com/jbt/markdown-editor) so let me know if I've b0rked it somewhere.


Props to Mr. Doob and his [code editor](http://mrdoob.com/projects/code-editor/), from which
the inspiration to this, and some handy implementation hints, came.

### Stuff used to make this:

 * [markdown-it](https://github.com/markdown-it/markdown-it) for Markdown parsing
 * [CodeMirror](http://codemirror.net/) for the awesome syntax-highlighted editor
 * [highlight.js](http://softwaremaniacs.org/soft/highlight/en/) for syntax highlighting in output code blocks
 * [js-deflate](https://github.com/dankogai/js-deflate) for gzipping of data to make it fit in URLs
